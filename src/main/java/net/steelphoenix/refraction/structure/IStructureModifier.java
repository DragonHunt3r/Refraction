package net.steelphoenix.refraction.structure;

import java.util.Optional;

import net.steelphoenix.refraction.converter.IConverter;
import net.steelphoenix.refraction.generator.IValueGenerator;

/**
 * A field access wrapper.
 *
 * @param <T> Modifier type.
 *
 * @author SteelPhoenix
 */
public interface IStructureModifier<T> {

	/**
	 * Get the type this structure modifier acts on.
	 *
	 * @return the target type.
	 */
	public Class<?> getTargetType();

	/**
	 * Get the type this structure reads/writes.
	 *
	 * @return the object type.
	 */
	public Class<T> getType();

	/**
	 * Get the type this structure modifier modifies.
	 *
	 * @return the field type.
	 */
	public Class<?> getFieldType();

	/**
	 * Get the instance this structure modifier acts on.
	 *
	 * @return the working instance.
	 */
	public Object getTarget();

	/**
	 * Read a field value.
	 *
	 * @param index Field index.
	 * @return the field value, converted if necessary.
	 */
	public T read(int index);

	/**
	 * Read a field value.
	 * If the index is invalid, null is returned.
	 *
	 * @param index Field index.
	 * @return the field value, converted if necessary.
	 */
	public T readSafely(int index);

	/**
	 * Read a field value.
	 * If the field could not be read or has value null, an empty optional is returned.
	 *
	 * @param index Field index.
	 * @return the optional with the field value, converted if necessary.
	 */
	public Optional<T> readOptional(int index);

	/**
	 * Write a field value.
	 *
	 * @param index Field index.
	 * @param value Field value.
	 * @return this for chaining.
	 */
	public IStructureModifier<T> write(int index, T value);

	/**
	 * Write a field value.
	 * If the index is invalid, nothing is written.
	 *
	 * @param index Field index.
	 * @param value Field value.
	 * @return this for chaining.
	 */
	public IStructureModifier<T> writeSafely(int index, T value);

	/**
	 * Write values for all fields generated by the given generator.
	 *
	 * @param generator Target generator.
	 * @return this for chaining.
	 */
	public IStructureModifier<T> write(IValueGenerator generator);

	/**
	 * Write default values for all fields.
	 *
	 * @return this for chaining.
	 *
	 * @see net.steelphoenix.refraction.generator.Generators#getDefaultGenerator()
	 */
	public IStructureModifier<T> writeDefaults();

	/**
	 * Get a structure modifier with the given instance as target.
	 *
	 * @param target Target.
	 * @return the created structure modifier.
	 */
	public IStructureModifier<T> withTarget(Object target);

	/**
	 * Get a structure modifier that only looks at fields of the given type.
	 *
	 * @param <U> Field type.
	 * @param type Field type class.
	 * @return the created structure modifier.
	 */
	public <U> IStructureModifier<U> withType(Class<U> type);

	/**
	 * Get a structure modifier that only looks at fields of the given type.
	 *
	 * @param <U> Converted type.
	 * @param type Field type class.
	 * @param converter Field value converter.
	 * @return the created structure modifier.
	 */
	public <U> IStructureModifier<U> withType(Class<?> type, IConverter<U> converter);

	/**
	 * Get a structure modifier that converts all values.
	 *
	 * @param <U> Converted type.
	 * @param converter Field value converter.
	 * @return the created structure modifier.
	 */
	public <U> IStructureModifier<U> withConverter(IConverter<U> converter);

	/**
	 * Get the size of this modifier.
	 *
	 * @return the amount of fields this modifier wraps.
	 */
	public int size();
}
